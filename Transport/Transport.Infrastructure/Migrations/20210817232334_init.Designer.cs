// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transport.Infrastructure.Persistence.Context;

namespace Transport.Infrastructure.Migrations
{
    [DbContext(typeof(TransportContext))]
    [Migration("20210817232334_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BuildingBlocks.EventBus.EventualConsistency.Database.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssemblyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccuredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerializedEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Transport.Domain.Assignments.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("_assignedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("AssignedOn");

                    b.Property<DateTime?>("_completedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletedOn");

                    b.Property<DateTime>("_createdOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<DateTime>("_deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("_dispatcherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DispatcherId");

                    b.Property<Guid?>("_driverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DriverId");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Transport.Domain.Groups.TransportGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_dispatcherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DispatcherId");

                    b.HasKey("Id");

                    b.ToTable("TransportGroups");
                });

            modelBuilder.Entity("Transport.Domain.Assignments.Assignment", b =>
                {
                    b.OwnsOne("Transport.Domain.Assignments.Address", "_destination", b1 =>
                        {
                            b1.Property<Guid>("AssignmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DestinationCity");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DestinationCountry");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DestinationPostalCode");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DestinationStreet");

                            b1.HasKey("AssignmentId");

                            b1.ToTable("Assignments");

                            b1.WithOwner()
                                .HasForeignKey("AssignmentId");
                        });

                    b.OwnsOne("Transport.Domain.Assignments.Address", "_start", b1 =>
                        {
                            b1.Property<Guid>("AssignmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StartingCity");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StartingCountry");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StartingPostalCode");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StartingStreet");

                            b1.HasKey("AssignmentId");

                            b1.ToTable("Assignments");

                            b1.WithOwner()
                                .HasForeignKey("AssignmentId");
                        });

                    b.OwnsOne("Transport.Domain.Documents.Document", "_transportDocument", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("AssignmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("_name")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.Property<string>("_number")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Number");

                            b1.HasKey("Id");

                            b1.HasIndex("AssignmentId")
                                .IsUnique();

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("AssignmentId");
                        });

                    b.Navigation("_destination");

                    b.Navigation("_start");

                    b.Navigation("_transportDocument");
                });

            modelBuilder.Entity("Transport.Domain.Groups.TransportGroup", b =>
                {
                    b.OwnsMany("Transport.Domain.Groups.Driver", "_drivers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("_groupId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("GroupId");

                            b1.HasKey("Id");

                            b1.HasIndex("_groupId");

                            b1.ToTable("Drivers");

                            b1.WithOwner()
                                .HasForeignKey("_groupId");
                        });

                    b.Navigation("_drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
